{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","url","name","_this2","fetch","then","response","json","data","toString","match","setState","quote","value","_this3","newQuote","_this4","react_default","a","createElement","className","Quotebox","App_SubmitButton","parentMethod","App_NewAuthor","newAuthor","Component","_ref","NewAuthor","props","_this5","click","changeQuote","slice","onClick","SubmitButton","_this6","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9207bb86.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// import TalkBox from \"./speechSynthesis\";\nimport \"./App.css\";\n// import \"./speechSynthesis.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      url: \"https://ron-swanson-quotes.herokuapp.com/v2/quotes\",\n      name: \"Ron Swanson\"\n    };\n  }\n\n  newQuote(url) {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        url.toString().match(/swanson/i)\n          ? this.setState({\n              quote: data,\n              name: \"Ron Swanson\"\n            })\n          : url.toString().match(/chucknorris/i)\n          ? this.setState({\n              quote: data.value,\n              name: \"Chuck Norris\"\n            })\n          : this.setState({\n              quote: data.quote,\n              name: \"Kanye\"\n            });\n      });\n  }\n\n  newAuthor() {\n    this.state.url.toString().match(/kanye/i)\n      ? this.setState(\n          {\n            url: \"https://api.chucknorris.io/jokes/random\"\n          },\n          () => {\n            this.newQuote(this.state.url);\n          }\n        )\n      : this.state.url.toString().match(/chucknorris/i)\n      ? this.setState(\n          {\n            url: \"https://ron-swanson-quotes.herokuapp.com/v2/quotes\"\n          },\n          () => {\n            this.newQuote(this.state.url);\n          }\n        )\n      : this.state.url.toString().match(/swanson/i)\n      ? this.setState(\n          {\n            url: \"https://cors-anywhere.herokuapp.com/https://api.kanye.rest\"\n          },\n          () => {\n            this.newQuote(this.state.url);\n          }\n        )\n      : this.setState(\n          {\n            url: \"https://cors-anywhere.herokuapp.com/https://api.kanye.rest\"\n          },\n          () => {\n            this.newQuote(this.state.url);\n          }\n        );\n  }\n\n  componentDidMount() {\n    this.newQuote(this.state.url);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"author\">{this.state.name} says:</div>\n          <Quotebox quote={this.state.quote} />\n          <SubmitButton parentMethod={() => this.newQuote(this.state.url)} />\n        </header>\n        <NewAuthor\n          parentMethod={() => this.newAuthor()}\n          name={this.state.name}\n        />\n        {/* <SpeakCheck />\n        <SayQuote /> */}\n      </div>\n    );\n  }\n}\n\n//Component displays quote\n\nfunction Quotebox({ quote }) {\n  return <div className=\"quoteBox\">\"{quote}\"</div>;\n}\n\n//button to say quote\n\nfunction SayQuote() {\n  return <button className=\"talkBtn\">Say Again</button>;\n}\n\n//checkbox can activate Speaker component\n\nfunction SpeakCheck() {\n  return (\n    <div>\n      <h3>Talk to me, Ron</h3>\n      <div className=\"checkboxThree\">\n        <input type=\"checkbox\" value=\"1\" id=\"checkboxThreeInput\" name=\"\" />\n        <label htmlFor=\"checkboxThreeInput\" />\n      </div>\n    </div>\n  );\n}\n\n//Gets a new Author\nclass NewAuthor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"Ron\"\n    };\n  }\n\n  click = () => {\n    this.props.parentMethod();\n    this.props.changeQuote();\n  };\n\n  render() {\n    return (\n      <div>\n        {/* Need to add function to remove second name */}\n        <h3>You're boring me {this.props.name.slice(0, 5)}</h3> {}\n        <button className=\"newAuthor\" onClick={this.click}>\n          New Author\n        </button>\n      </div>\n    );\n  }\n}\n\n//Gets new quote\nclass SubmitButton extends Component {\n  click = () => {\n    this.props.parentMethod();\n  };\n\n  render() {\n    return (\n      <button className=\"submitButton\" onClick={this.click}>\n        New Quote, my good man.\n      </button>\n    );\n  }\n}\n\n//Says current quote\n\n// class TalkBox extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       speaking: false\n//     };\n//   }\n\n//   //Import speaker function here\n//   //Pass in text content from quotebox\n\n//   render() {\n//     return <div className=\"talkBox\" />;\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}